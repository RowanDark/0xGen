/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ScopeRouteImport } from './routes/scope'
import { Route as RunsRouteImport } from './routes/runs'
import { Route as FlowsRouteImport } from './routes/flows'
import { Route as CasesRouteImport } from './routes/cases'
import { Route as PluginsRouteImport } from './routes/plugins'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RunsComposerRouteImport } from './routes/runs.composer'
import { Route as RunsRunIdRouteImport } from './routes/runs.$runId'

const ScopeRoute = ScopeRouteImport.update({
  id: '/scope',
  path: '/scope',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsRoute = RunsRouteImport.update({
  id: '/runs',
  path: '/runs',
  getParentRoute: () => rootRouteImport,
} as any)
const FlowsRoute = FlowsRouteImport.update({
  id: '/flows',
  path: '/flows',
  getParentRoute: () => rootRouteImport,
} as any)
const CasesRoute = CasesRouteImport.update({
  id: '/cases',
  path: '/cases',
  getParentRoute: () => rootRouteImport,
} as any)
const PluginsRoute = PluginsRouteImport.update({
  id: '/plugins',
  path: '/plugins',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsComposerRoute = RunsComposerRouteImport.update({
  id: '/composer',
  path: '/composer',
  getParentRoute: () => RunsRoute,
} as any)
const RunsRunIdRoute = RunsRunIdRouteImport.update({
  id: '/$runId',
  path: '/$runId',
  getParentRoute: () => RunsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/flows': typeof FlowsRoute
  '/plugins': typeof PluginsRoute
  '/runs': typeof RunsRouteWithChildren
  '/scope': typeof ScopeRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/runs/composer': typeof RunsComposerRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/flows': typeof FlowsRoute
  '/plugins': typeof PluginsRoute
  '/runs': typeof RunsRouteWithChildren
  '/scope': typeof ScopeRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/runs/composer': typeof RunsComposerRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cases': typeof CasesRoute
  '/flows': typeof FlowsRoute
  '/plugins': typeof PluginsRoute
  '/runs': typeof RunsRouteWithChildren
  '/scope': typeof ScopeRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/runs/composer': typeof RunsComposerRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cases'
    | '/flows'
    | '/plugins'
    | '/runs'
    | '/scope'
    | '/runs/$runId'
    | '/runs/composer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cases'
    | '/flows'
    | '/plugins'
    | '/runs'
    | '/scope'
    | '/runs/$runId'
    | '/runs/composer'
  id:
    | '__root__'
    | '/'
    | '/cases'
    | '/flows'
    | '/plugins'
    | '/runs'
    | '/scope'
    | '/runs/$runId'
    | '/runs/composer'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CasesRoute: typeof CasesRoute
  FlowsRoute: typeof FlowsRoute
  PluginsRoute: typeof PluginsRoute
  RunsRoute: typeof RunsRouteWithChildren
  ScopeRoute: typeof ScopeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/scope': {
      id: '/scope'
      path: '/scope'
      fullPath: '/scope'
      preLoaderRoute: typeof ScopeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs': {
      id: '/runs'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flows': {
      id: '/flows'
      path: '/flows'
      fullPath: '/flows'
      preLoaderRoute: typeof FlowsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cases': {
      id: '/cases'
      path: '/cases'
      fullPath: '/cases'
      preLoaderRoute: typeof CasesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plugins': {
      id: '/plugins'
      path: '/plugins'
      fullPath: '/plugins'
      preLoaderRoute: typeof PluginsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/composer': {
      id: '/runs/composer'
      path: '/composer'
      fullPath: '/runs/composer'
      preLoaderRoute: typeof RunsComposerRouteImport
      parentRoute: typeof RunsRoute
    }
    '/runs/$runId': {
      id: '/runs/$runId'
      path: '/$runId'
      fullPath: '/runs/$runId'
      preLoaderRoute: typeof RunsRunIdRouteImport
      parentRoute: typeof RunsRoute
    }
  }
}

interface RunsRouteChildren {
  RunsRunIdRoute: typeof RunsRunIdRoute
  RunsComposerRoute: typeof RunsComposerRoute
}

const RunsRouteChildren: RunsRouteChildren = {
  RunsRunIdRoute: RunsRunIdRoute,
  RunsComposerRoute: RunsComposerRoute,
}

const RunsRouteWithChildren = RunsRoute._addFileChildren(RunsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CasesRoute: CasesRoute,
  FlowsRoute: FlowsRoute,
  RunsRoute: RunsRouteWithChildren,
  ScopeRoute: ScopeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
