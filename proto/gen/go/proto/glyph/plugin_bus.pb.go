// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: glyph/plugin_bus.proto

package glyph

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PluginEvent is a message sent from a plugin to the host.
type PluginEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*PluginEvent_Hello
	//	*PluginEvent_Finding
	Event         isPluginEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginEvent) Reset() {
	*x = PluginEvent{}
	mi := &file_glyph_plugin_bus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginEvent) ProtoMessage() {}

func (x *PluginEvent) ProtoReflect() protoreflect.Message {
	mi := &file_glyph_plugin_bus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginEvent.ProtoReflect.Descriptor instead.
func (*PluginEvent) Descriptor() ([]byte, []int) {
	return file_glyph_plugin_bus_proto_rawDescGZIP(), []int{0}
}

func (x *PluginEvent) GetEvent() isPluginEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *PluginEvent) GetHello() *PluginHello {
	if x != nil {
		if x, ok := x.Event.(*PluginEvent_Hello); ok {
			return x.Hello
		}
	}
	return nil
}

func (x *PluginEvent) GetFinding() *Finding {
	if x != nil {
		if x, ok := x.Event.(*PluginEvent_Finding); ok {
			return x.Finding
		}
	}
	return nil
}

type isPluginEvent_Event interface {
	isPluginEvent_Event()
}

type PluginEvent_Hello struct {
	// The first message sent by a plugin must be a `hello` message.
	Hello *PluginHello `protobuf:"bytes,1,opt,name=hello,proto3,oneof"`
}

type PluginEvent_Finding struct {
	// After authentication, a plugin can send findings.
	Finding *Finding `protobuf:"bytes,2,opt,name=finding,proto3,oneof"`
}

func (*PluginEvent_Hello) isPluginEvent_Event() {}

func (*PluginEvent_Finding) isPluginEvent_Event() {}

// PluginHello is the initial message a plugin sends to identify and
// authenticate itself.
type PluginHello struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A secret token to authenticate the plugin.
	AuthToken     string `protobuf:"bytes,1,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginHello) Reset() {
	*x = PluginHello{}
	mi := &file_glyph_plugin_bus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginHello) ProtoMessage() {}

func (x *PluginHello) ProtoReflect() protoreflect.Message {
	mi := &file_glyph_plugin_bus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginHello.ProtoReflect.Descriptor instead.
func (*PluginHello) Descriptor() ([]byte, []int) {
	return file_glyph_plugin_bus_proto_rawDescGZIP(), []int{1}
}

func (x *PluginHello) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

// HostEvent is a message sent from the host to a plugin.
type HostEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// For now, the only event is a flow event.
	//
	// Types that are valid to be assigned to Event:
	//
	//	*HostEvent_FlowEvent
	Event         isHostEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostEvent) Reset() {
	*x = HostEvent{}
	mi := &file_glyph_plugin_bus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostEvent) ProtoMessage() {}

func (x *HostEvent) ProtoReflect() protoreflect.Message {
	mi := &file_glyph_plugin_bus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostEvent.ProtoReflect.Descriptor instead.
func (*HostEvent) Descriptor() ([]byte, []int) {
	return file_glyph_plugin_bus_proto_rawDescGZIP(), []int{2}
}

func (x *HostEvent) GetEvent() isHostEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *HostEvent) GetFlowEvent() *FlowEvent {
	if x != nil {
		if x, ok := x.Event.(*HostEvent_FlowEvent); ok {
			return x.FlowEvent
		}
	}
	return nil
}

type isHostEvent_Event interface {
	isHostEvent_Event()
}

type HostEvent_FlowEvent struct {
	FlowEvent *FlowEvent `protobuf:"bytes,1,opt,name=flow_event,json=flowEvent,proto3,oneof"`
}

func (*HostEvent_FlowEvent) isHostEvent_Event() {}

var File_glyph_plugin_bus_proto protoreflect.FileDescriptor

const file_glyph_plugin_bus_proto_rawDesc = "" +
	"\n" +
	"\x16glyph/plugin_bus.proto\x12\x10glyph.plugin_bus\x1a\x12glyph/common.proto\"\x80\x01\n" +
	"\vPluginEvent\x125\n" +
	"\x05hello\x18\x01 \x01(\v2\x1d.glyph.plugin_bus.PluginHelloH\x00R\x05hello\x121\n" +
	"\afinding\x18\x02 \x01(\v2\x15.glyph.common.FindingH\x00R\afindingB\a\n" +
	"\x05event\",\n" +
	"\vPluginHello\x12\x1d\n" +
	"\n" +
	"auth_token\x18\x01 \x01(\tR\tauthToken\"N\n" +
	"\tHostEvent\x128\n" +
	"\n" +
	"flow_event\x18\x01 \x01(\v2\x17.glyph.common.FlowEventH\x00R\tflowEventB\a\n" +
	"\x05event2Z\n" +
	"\tPluginBus\x12M\n" +
	"\vEventStream\x12\x1d.glyph.plugin_bus.PluginEvent\x1a\x1b.glyph.plugin_bus.HostEvent(\x010\x01B,Z*github.com/example/glyph/proto/glyph;glyphb\x06proto3"

var (
	file_glyph_plugin_bus_proto_rawDescOnce sync.Once
	file_glyph_plugin_bus_proto_rawDescData []byte
)

func file_glyph_plugin_bus_proto_rawDescGZIP() []byte {
	file_glyph_plugin_bus_proto_rawDescOnce.Do(func() {
		file_glyph_plugin_bus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_glyph_plugin_bus_proto_rawDesc), len(file_glyph_plugin_bus_proto_rawDesc)))
	})
	return file_glyph_plugin_bus_proto_rawDescData
}

var file_glyph_plugin_bus_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_glyph_plugin_bus_proto_goTypes = []any{
	(*PluginEvent)(nil), // 0: glyph.plugin_bus.PluginEvent
	(*PluginHello)(nil), // 1: glyph.plugin_bus.PluginHello
	(*HostEvent)(nil),   // 2: glyph.plugin_bus.HostEvent
	(*Finding)(nil),     // 3: glyph.common.Finding
	(*FlowEvent)(nil),   // 4: glyph.common.FlowEvent
}
var file_glyph_plugin_bus_proto_depIdxs = []int32{
	1, // 0: glyph.plugin_bus.PluginEvent.hello:type_name -> glyph.plugin_bus.PluginHello
	3, // 1: glyph.plugin_bus.PluginEvent.finding:type_name -> glyph.common.Finding
	4, // 2: glyph.plugin_bus.HostEvent.flow_event:type_name -> glyph.common.FlowEvent
	0, // 3: glyph.plugin_bus.PluginBus.EventStream:input_type -> glyph.plugin_bus.PluginEvent
	2, // 4: glyph.plugin_bus.PluginBus.EventStream:output_type -> glyph.plugin_bus.HostEvent
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_glyph_plugin_bus_proto_init() }
func file_glyph_plugin_bus_proto_init() {
	if File_glyph_plugin_bus_proto != nil {
		return
	}
	file_glyph_common_proto_init()
	file_glyph_plugin_bus_proto_msgTypes[0].OneofWrappers = []any{
		(*PluginEvent_Hello)(nil),
		(*PluginEvent_Finding)(nil),
	}
	file_glyph_plugin_bus_proto_msgTypes[2].OneofWrappers = []any{
		(*HostEvent_FlowEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_glyph_plugin_bus_proto_rawDesc), len(file_glyph_plugin_bus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_glyph_plugin_bus_proto_goTypes,
		DependencyIndexes: file_glyph_plugin_bus_proto_depIdxs,
		MessageInfos:      file_glyph_plugin_bus_proto_msgTypes,
	}.Build()
	File_glyph_plugin_bus_proto = out.File
	file_glyph_plugin_bus_proto_goTypes = nil
	file_glyph_plugin_bus_proto_depIdxs = nil
}
