// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: glyph/plugin_bus.proto

package glyph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginBus_EventStream_FullMethodName       = "/glyph.plugin_bus.PluginBus/EventStream"
	PluginBus_GrantCapabilities_FullMethodName = "/glyph.plugin_bus.PluginBus/GrantCapabilities"
)

// PluginBusClient is the client API for PluginBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The PluginBus service provides a bi-directional stream for plugins to
// receive events from the host and send findings back.
type PluginBusClient interface {
	// EventStream is a long-lived, bi-directional stream between the host
	// (`glyphd`) and a single plugin.
	EventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PluginEvent, HostEvent], error)
	// GrantCapabilities issues a short-lived capability token for a plugin invocation.
	GrantCapabilities(ctx context.Context, in *PluginCapabilityRequest, opts ...grpc.CallOption) (*PluginCapabilityGrant, error)
}

type pluginBusClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginBusClient(cc grpc.ClientConnInterface) PluginBusClient {
	return &pluginBusClient{cc}
}

func (c *pluginBusClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PluginEvent, HostEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PluginBus_ServiceDesc.Streams[0], PluginBus_EventStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PluginEvent, HostEvent]{ClientStream: stream}
	return x, nil
}

func (c *pluginBusClient) GrantCapabilities(ctx context.Context, in *PluginCapabilityRequest, opts ...grpc.CallOption) (*PluginCapabilityGrant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PluginCapabilityGrant)
	err := c.cc.Invoke(ctx, PluginBus_GrantCapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginBus_EventStreamClient = grpc.BidiStreamingClient[PluginEvent, HostEvent]

// PluginBusServer is the server API for PluginBus service.
// All implementations must embed UnimplementedPluginBusServer
// for forward compatibility.
//
// The PluginBus service provides a bi-directional stream for plugins to
// receive events from the host and send findings back.
type PluginBusServer interface {
	// EventStream is a long-lived, bi-directional stream between the host
	// (`glyphd`) and a single plugin.
	EventStream(grpc.BidiStreamingServer[PluginEvent, HostEvent]) error
	// GrantCapabilities issues a short-lived capability token for a plugin invocation.
	GrantCapabilities(context.Context, *PluginCapabilityRequest) (*PluginCapabilityGrant, error)
	mustEmbedUnimplementedPluginBusServer()
}

// UnimplementedPluginBusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginBusServer struct{}

func (UnimplementedPluginBusServer) EventStream(grpc.BidiStreamingServer[PluginEvent, HostEvent]) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedPluginBusServer) GrantCapabilities(context.Context, *PluginCapabilityRequest) (*PluginCapabilityGrant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCapabilities not implemented")
}
func (UnimplementedPluginBusServer) mustEmbedUnimplementedPluginBusServer() {}
func (UnimplementedPluginBusServer) testEmbeddedByValue()                   {}

// UnsafePluginBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginBusServer will
// result in compilation errors.
type UnsafePluginBusServer interface {
	mustEmbedUnimplementedPluginBusServer()
}

func RegisterPluginBusServer(s grpc.ServiceRegistrar, srv PluginBusServer) {
	// If the following call pancis, it indicates UnimplementedPluginBusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginBus_ServiceDesc, srv)
}

func _PluginBus_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginBusServer).EventStream(&grpc.GenericServerStream[PluginEvent, HostEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PluginBus_EventStreamServer = grpc.BidiStreamingServer[PluginEvent, HostEvent]

func _PluginBus_GrantCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginBusServer).GrantCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginBus_GrantCapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginBusServer).GrantCapabilities(ctx, req.(*PluginCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginBus_ServiceDesc is the grpc.ServiceDesc for PluginBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "glyph.plugin_bus.PluginBus",
	HandlerType: (*PluginBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantCapabilities",
			Handler:    _PluginBus_GrantCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _PluginBus_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "glyph/plugin_bus.proto",
}
