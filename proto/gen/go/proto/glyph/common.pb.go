// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: glyph/common.proto

package glyph

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Severity int32

const (
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	Severity_INFO                 Severity = 1
	Severity_LOW                  Severity = 2
	Severity_MEDIUM               Severity = 3
	Severity_HIGH                 Severity = 4
	Severity_CRITICAL             Severity = 5
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "INFO",
		2: "LOW",
		3: "MEDIUM",
		4: "HIGH",
		5: "CRITICAL",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"INFO":                 1,
		"LOW":                  2,
		"MEDIUM":               3,
		"HIGH":                 4,
		"CRITICAL":             5,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_glyph_common_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_glyph_common_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_glyph_common_proto_rawDescGZIP(), []int{0}
}

type FlowEvent_Type int32

const (
	FlowEvent_FLOW_EVENT_UNSPECIFIED FlowEvent_Type = 0
	FlowEvent_FLOW_REQUEST           FlowEvent_Type = 1
	FlowEvent_FLOW_RESPONSE          FlowEvent_Type = 2
)

// Enum value maps for FlowEvent_Type.
var (
	FlowEvent_Type_name = map[int32]string{
		0: "FLOW_EVENT_UNSPECIFIED",
		1: "FLOW_REQUEST",
		2: "FLOW_RESPONSE",
	}
	FlowEvent_Type_value = map[string]int32{
		"FLOW_EVENT_UNSPECIFIED": 0,
		"FLOW_REQUEST":           1,
		"FLOW_RESPONSE":          2,
	}
)

func (x FlowEvent_Type) Enum() *FlowEvent_Type {
	p := new(FlowEvent_Type)
	*p = x
	return p
}

func (x FlowEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_glyph_common_proto_enumTypes[1].Descriptor()
}

func (FlowEvent_Type) Type() protoreflect.EnumType {
	return &file_glyph_common_proto_enumTypes[1]
}

func (x FlowEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowEvent_Type.Descriptor instead.
func (FlowEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_glyph_common_proto_rawDescGZIP(), []int{1, 0}
}

// A Finding is a report from a plugin about something it has observed.
type Finding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of finding, e.g., "missing-security-header".
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A human-readable message describing the finding.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Severity of the finding.
	Severity Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=glyph.common.Severity" json:"severity,omitempty"`
	// Additional structured data about the finding.
	Metadata      map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Finding) Reset() {
	*x = Finding{}
	mi := &file_glyph_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_glyph_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_glyph_common_proto_rawDescGZIP(), []int{0}
}

func (x *Finding) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Finding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Finding) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *Finding) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A FlowEvent represents a network event, like an HTTP request or response.
type FlowEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  FlowEvent_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=glyph.common.FlowEvent_Type" json:"type,omitempty"`
	// For simplicity in this example, we'll just pass a blob of data.
	// A real implementation would have structured request/response fields.
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowEvent) Reset() {
	*x = FlowEvent{}
	mi := &file_glyph_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEvent) ProtoMessage() {}

func (x *FlowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_glyph_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEvent.ProtoReflect.Descriptor instead.
func (*FlowEvent) Descriptor() ([]byte, []int) {
	return file_glyph_common_proto_rawDescGZIP(), []int{1}
}

func (x *FlowEvent) GetType() FlowEvent_Type {
	if x != nil {
		return x.Type
	}
	return FlowEvent_FLOW_EVENT_UNSPECIFIED
}

func (x *FlowEvent) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_glyph_common_proto protoreflect.FileDescriptor

const file_glyph_common_proto_rawDesc = "" +
	"\n" +
	"\x12glyph/common.proto\x12\fglyph.common\"\xe9\x01\n" +
	"\aFinding\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x122\n" +
	"\bseverity\x18\x03 \x01(\x0e2\x16.glyph.common.SeverityR\bseverity\x12?\n" +
	"\bmetadata\x18\x04 \x03(\v2#.glyph.common.Finding.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x01\n" +
	"\tFlowEvent\x120\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.glyph.common.FlowEvent.TypeR\x04type\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\"G\n" +
	"\x04Type\x12\x1a\n" +
	"\x16FLOW_EVENT_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fFLOW_REQUEST\x10\x01\x12\x11\n" +
	"\rFLOW_RESPONSE\x10\x02*[\n" +
	"\bSeverity\x12\x18\n" +
	"\x14SEVERITY_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04INFO\x10\x01\x12\a\n" +
	"\x03LOW\x10\x02\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x03\x12\b\n" +
	"\x04HIGH\x10\x04\x12\f\n" +
	"\bCRITICAL\x10\x05B.Z,github.com/RowanDark/0xgen/proto/glyph;glyphb\x06proto3"

var (
	file_glyph_common_proto_rawDescOnce sync.Once
	file_glyph_common_proto_rawDescData []byte
)

func file_glyph_common_proto_rawDescGZIP() []byte {
	file_glyph_common_proto_rawDescOnce.Do(func() {
		file_glyph_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_glyph_common_proto_rawDesc), len(file_glyph_common_proto_rawDesc)))
	})
	return file_glyph_common_proto_rawDescData
}

var file_glyph_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_glyph_common_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_glyph_common_proto_goTypes = []any{
	(Severity)(0),       // 0: glyph.common.Severity
	(FlowEvent_Type)(0), // 1: glyph.common.FlowEvent.Type
	(*Finding)(nil),     // 2: glyph.common.Finding
	(*FlowEvent)(nil),   // 3: glyph.common.FlowEvent
	nil,                 // 4: glyph.common.Finding.MetadataEntry
}
var file_glyph_common_proto_depIdxs = []int32{
	0, // 0: glyph.common.Finding.severity:type_name -> glyph.common.Severity
	4, // 1: glyph.common.Finding.metadata:type_name -> glyph.common.Finding.MetadataEntry
	1, // 2: glyph.common.FlowEvent.type:type_name -> glyph.common.FlowEvent.Type
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_glyph_common_proto_init() }
func file_glyph_common_proto_init() {
	if File_glyph_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_glyph_common_proto_rawDesc), len(file_glyph_common_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_glyph_common_proto_goTypes,
		DependencyIndexes: file_glyph_common_proto_depIdxs,
		EnumInfos:         file_glyph_common_proto_enumTypes,
		MessageInfos:      file_glyph_common_proto_msgTypes,
	}.Build()
	File_glyph_common_proto = out.File
	file_glyph_common_proto_goTypes = nil
	file_glyph_common_proto_depIdxs = nil
}
