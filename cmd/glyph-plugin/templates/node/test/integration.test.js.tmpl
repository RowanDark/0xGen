const { createPlugin } = require('../src/index.js');
const { macros } = require('../src/capabilities.js');

async function run() {
  const events = [];
  const audit = [];
  const original = { ...macros };
  macros.netOutbound = true;
  macros.secretsRead = true;

  const plugin = createPlugin({
    broker: {
      fs: {
        async readFile(path) {
          if (path === 'task.json') {
            return Buffer.from('{"task":"demo"}');
          }
          const err = new Error('not found');
          err.code = 'NOT_FOUND';
          throw err;
        }
      },
      secrets: {
        async get(name) {
          if (name === 'API_TOKEN') {
            return 'token123';
          }
          const err = new Error('not found');
          err.code = 'NOT_FOUND';
          throw err;
        }
      },
      net: {
        async request({ method, url }) {
          audit.push({ method, url });
          if (url.includes('deny')) {
            const err = new Error('denied by broker');
            err.code = 'DENIED';
            throw err;
          }
          return { statusCode: 204 };
        }
      }
    },
    logger: {
      info: (...args) => events.push(['info', ...args]),
      warn: (...args) => events.push(['warn', ...args])
    }
  });

  try {
    await plugin.onStart({});
    await plugin.onHTTPPassive({ response: { statusLine: 'HTTP/1.1 200 OK' } });
  } finally {
    Object.assign(macros, original);
  }

  if (events.length === 0) {
    throw new Error('expected log output');
  }
  if (audit.length === 0) {
    throw new Error('expected network audit entries');
  }
}

run().catch(err => {
  console.error(err);
  process.exitCode = 1;
});
