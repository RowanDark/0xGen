name: 0xgen Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    name: 0xgen GoReleaser
    runs-on: ubuntu-latest
    env:
      WINDOWS_CODESIGN_PFX: ${{ secrets.WINDOWS_CODESIGN_PFX }}
      WINDOWS_CODESIGN_PASSWORD: ${{ secrets.WINDOWS_CODESIGN_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install packaging dependencies
        run: sudo apt-get update && sudo apt-get install -y msitools osslsigncode

      - name: Sign Windows binaries
        if: env.WINDOWS_CODESIGN_PFX != ''
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          cert=$(mktemp)
          trap 'rm -f "$cert"' EXIT
          echo "$WINDOWS_CODESIGN_PFX" | base64 -d >"$cert"
          shopt -s nullglob
          for archive in dist/glyphctl_${TAG}_windows_*.zip; do
            workdir=$(mktemp -d)
            unzip -q "$archive" -d "$workdir"
            if [[ ! -f "$workdir/glyphctl.exe" ]]; then
              echo "glyphctl.exe missing from $archive" >&2
              exit 1
            fi
            if [[ -n "${WINDOWS_CODESIGN_PASSWORD:-}" ]]; then
              pass_args=(-pass "$WINDOWS_CODESIGN_PASSWORD")
            else
              pass_args=()
            fi
            osslsigncode sign \
              -pkcs12 "$cert" \
              "${pass_args[@]}" \
              -n "Glyph CLI" \
              -i "https://github.com/RowanDark/Glyph" \
              -t "http://timestamp.digicert.com" \
              -in "$workdir/glyphctl.exe" \
              -out "$workdir/glyphctl-signed.exe"
            mv "$workdir/glyphctl-signed.exe" "$workdir/glyphctl.exe"
            rm -f "$archive"
            (cd "$workdir" && zip -r9 "$OLDPWD/$(basename "$archive")" .)
            rm -rf "$workdir"
            echo "Signed $archive"
          done

      - name: Build Windows installers
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          for arch in amd64 arm64; do
            unzip -o "dist/glyphctl_${TAG}_windows_${arch}.zip" -d "dist/windows_${arch}"
            ./scripts/build_windows_installer.sh "$TAG" "$arch" "dist/windows_${arch}" dist
          done

      - name: Upload Windows installers to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          gh release upload "$TAG" \
            "dist/glyphctl_${TAG}_windows_amd64.msi" \
            "dist/glyphctl_${TAG}_windows_arm64.msi" \
            --repo "$GITHUB_REPOSITORY" \
            --clobber

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 0xgen-release-dist
          path: dist/
          if-no-files-found: error
  linux-package-smoke:
    name: 0xgen Linux package smoke tests
    runs-on: ubuntu-latest
    needs:
      - goreleaser
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: debian:bookworm-slim
            package_glob: glyphctl_*_linux_amd64.deb
            setup: |
              apt-get update
            install: |
              apt-get install -y "./$package_basename"
          - image: quay.io/rockylinux/rockylinux:9
            package_glob: glyphctl_*_linux_amd64.rpm
            setup: |
              dnf install -y --setopt=install_weak_deps=False ca-certificates
            install: |
              dnf install -y --nogpgcheck "./$package_basename"
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: 0xgen-release-dist
          path: dist
      - name: Install package
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          packages=(dist/${{ matrix.package_glob }})
          if [ ${#packages[@]} -eq 0 ]; then
            echo "Unable to find package matching pattern" >&2
            ls dist
            exit 1
          fi
          package="${packages[0]}"
          cp "$package" .
          package_basename="$(basename "$package")"
          ${{ matrix.setup }}
          ${{ matrix.install }}
          glyphctl --version
  update-readme-badge:
    name: 0xgen Update README badge
    runs-on: ubuntu-latest
    needs:
      - linux-package-smoke
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Refresh release badge
        env:
          GITHUB_REF_TYPE: ${{ github.ref_type }}
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          if [ "${GITHUB_REF_TYPE}" != "tag" ]; then
            echo "Skipping badge update for ref type ${GITHUB_REF_TYPE}"
            exit 0
          fi

          python3 scripts/update_version_badge.py "${RELEASE_TAG}"

          if git diff --quiet README.md; then
            echo "README already up to date"
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "docs: refresh release badge for ${RELEASE_TAG}"
          git push origin HEAD:main
