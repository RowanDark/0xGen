name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install msitools
        run: sudo apt-get update && sudo apt-get install -y msitools

      - name: Build Windows installers
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          for arch in amd64 arm64; do
            unzip -o "dist/glyphctl_${TAG}_windows_${arch}.zip" -d "dist/windows_${arch}"
            ./scripts/build_windows_installer.sh "$TAG" "$arch" "dist/windows_${arch}" dist
          done

      - name: Upload Windows installers to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          gh release upload "$TAG" \
            "dist/glyphctl_${TAG}_windows_amd64.msi" \
            "dist/glyphctl_${TAG}_windows_arm64.msi" \
            --repo "$GITHUB_REPOSITORY" \
            --clobber

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/
          if-no-files-found: error
  linux-package-smoke:
    name: Linux package smoke tests
    runs-on: ubuntu-latest
    needs:
      - goreleaser
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: debian:bookworm-slim
            package_glob: glyphctl_*_linux_amd64.deb
            setup: |
              apt-get update
            install: |
              apt-get install -y "./$package_basename"
          - image: quay.io/rockylinux/rockylinux:9
            package_glob: glyphctl_*_linux_amd64.rpm
            setup: |
              dnf install -y --setopt=install_weak_deps=False ca-certificates
            install: |
              dnf install -y --nogpgcheck "./$package_basename"
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist
      - name: Install package
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          packages=(dist/${{ matrix.package_glob }})
          if [ ${#packages[@]} -eq 0 ]; then
            echo "Unable to find package matching pattern" >&2
            ls dist
            exit 1
          fi
          package="${packages[0]}"
          cp "$package" .
          package_basename="$(basename "$package")"
          ${{ matrix.setup }}
          ${{ matrix.install }}
          glyphctl --version
