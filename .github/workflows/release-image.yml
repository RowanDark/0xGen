name: Release Container Image

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image name
        id: image
        run: |
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          echo "name=ghcr.io/${owner}/glyphctl" >>"$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.name }}
          tags: |
            type=ref,event=tag
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}

      - name: Select primary tag
        id: tag
        run: |
          primary=$(printf '%s\n' "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "ref=$primary" >>"$GITHUB_OUTPUT"

      - name: Upload image digest for provenance
        run: |
          echo "${{ steps.build.outputs.digest }}" >image-digest.txt
          echo "${{ steps.meta.outputs.tags }}" >image-tags.txt
        shell: bash

      - name: Archive image metadata
        uses: actions/upload-artifact@v4
        with:
          name: release-image-metadata
          path: |
            image-digest.txt
            image-tags.txt

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign image
        env:
          COSIGN_YES: "true"
          COSIGN_EXPERIMENTAL: "1"
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          tags='${{ steps.meta.outputs.tags }}'
          while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              cosign sign "${tag}@${DIGEST}"
            fi
          done <<< "$tags"

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ${{ steps.tag.outputs.ref }}
          severity: CRITICAL,HIGH
          ignore-unfixed: true
        env:
          TRIVY_USERNAME: ${{ github.actor }}
          TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Grype vulnerability scan
        uses: anchore/grype-action@v0.9.1
        with:
          image: ${{ steps.tag.outputs.ref }}
          fail-build: true
          severity-cutoff: high
