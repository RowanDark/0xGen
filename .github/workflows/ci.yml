name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
permissions:
  contents: read

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - name: Cache Go
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build
        run: go build ./...

      - name: Validate plugin manifests
        run: |
          set -euo pipefail
          npm -s i -g ajv-cli@5.0.0 || true
          ROOT="$GITHUB_WORKSPACE"
          SCHEMA="$ROOT/plugins/manifest.schema.json"

          shopt -s nullglob
          MANIFESTS=("$ROOT"/plugins/*/manifest.json)
          if (( ${#MANIFESTS[@]} == 0 )); then
            echo "No plugin manifests found under plugins/*/manifest.json"; exit 2
          fi

          rc=0
          for mf in "${MANIFESTS[@]}"; do
            rel="${mf#$ROOT/}"
            echo "• validating $rel"
            # Guard against a BOM / hidden unicode
            if LC_ALL=C grep -q $'\xEF\xBB\xBF' "$mf"; then
              echo "  ✗ UTF-8 BOM detected"; rc=2; continue
            fi
            # JSON well-formed
            if ! jq -e . "$mf" >/dev/null 2>&1; then
              echo "  ✗ invalid JSON (parse error)"; rc=2; continue
            fi
            # Schema validation (strict)
            if ! ajv validate -s "$SCHEMA" -d "$mf" --strict=true --errors=lineNumbers; then
              echo "  ✗ schema validation failed"; rc=2; continue
            fi
            echo "  ✓ ok"
          done
          exit "$rc"

      - name: Test (race)
        run: go test -race ./...

      - name: Generate sample HTML report
        if: matrix.os == 'ubuntu-latest'
        run: go run ./cmd/glyphctl report --input examples/findings-sample.jsonl --out report.html --format html

      - name: Upload sample HTML report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: glyph-report-html
          path: report.html
          if-no-files-found: error

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.6
          args: --out-format=github-actions ./...
