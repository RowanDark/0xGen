name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - name: Cache Go
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build
        run: go build ./...

      - name: Validate plugin manifests
        shell: bash
        run: |
          set -euo pipefail
          npm -s i -g ajv-cli@5.0.0 || true
          ROOT="$GITHUB_WORKSPACE"
          SCHEMA="$ROOT/plugins/manifest.schema.json"

          shopt -s nullglob
          MANIFESTS=("$ROOT"/plugins/*/manifest.json)
          if (( ${#MANIFESTS[@]} == 0 )); then
            echo "No plugin manifests found under plugins/*/manifest.json"; exit 2
          fi

          rc=0
          for mf in "${MANIFESTS[@]}"; do
            rel="${mf#$ROOT/}"
            echo "• validating $rel"
            # Guard against a BOM / hidden unicode
            if LC_ALL=C grep -q $'\xEF\xBB\xBF' "$mf"; then
              echo "  ✗ UTF-8 BOM detected"; rc=2; continue
            fi
            # JSON well-formed
            if ! jq -e . "$mf" >/dev/null 2>&1; then
              echo "  ✗ invalid JSON (parse error)"; rc=2; continue
            fi
            # Schema validation (strict)
            if ! ajv validate -s "$SCHEMA" -d "$mf" --strict=true --errors=lineNumbers; then
              echo "  ✗ schema validation failed"; rc=2; continue
            fi
          echo "  ✓ ok"
        done
        exit "$rc"

      - name: Enforce security checklist
        if: matrix.os == 'ubuntu-latest'
        run: scripts/check_security_checklist.sh

      - name: Test (race)
        run: go test -race ./...

      - name: Windows plugin smoke test
        if: matrix.os == 'windows-latest'
        run: go test ./internal/e2e -run TestGlyphctlSmoke -count=1

      - name: Generate sample HTML report
        if: matrix.os == 'ubuntu-latest'
        run: go run ./cmd/glyphctl report --input examples/findings-sample.jsonl --out report.html --format html

      - name: Upload sample HTML report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: glyph-report-html
          path: report.html
          if-no-files-found: error

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
      - uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.6
          args: --out-format=github-actions ./...

  web-accessibility:
    name: Web accessibility
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: apps/desktop-shell/pnpm-lock.yaml
      - name: Install dependencies
        working-directory: apps/desktop-shell
        run: pnpm install --frozen-lockfile
      - name: Install Playwright browsers
        working-directory: apps/desktop-shell
        run: pnpm exec playwright install --with-deps
      - name: Run accessibility checks
        working-directory: apps/desktop-shell
        run: pnpm run test:a11y
      - name: Upload accessibility artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: desktop-shell-a11y-${{ github.sha }}
          path: |
            apps/desktop-shell/playwright-report
            apps/desktop-shell/test-results
          if-no-files-found: warn

  perf-bench:
    name: Performance benchmarks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - name: Run synthetic workloads
        run: >-
          go run ./cmd/perfbench --baseline perf/baseline/findings_bus_v1.0.json --output perf/results/latest.json --threshold 0.10
          --history perf/results/history.jsonl --history-markdown perf/results/history.md

      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: perf-metrics
          path: |
            perf/results/latest.json
            perf/results/history.jsonl
            perf/results/history.md
          if-no-files-found: error

  container-scan:
    name: Container security scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          load: true
          tags: glyphctl:ci

      - name: Container smoke test
        run: |
          set -euo pipefail

          data_volume="$(docker volume create glyph-ci-data)"
          out_volume="$(docker volume create glyph-ci-out)"

          cleanup() {
            docker volume rm -f "$data_volume" "$out_volume" >/dev/null 2>&1 || true
          }
          trap cleanup EXIT

          common_flags=(
            --rm
            --read-only
            --cap-drop=ALL
            --security-opt no-new-privileges
            --pids-limit=256
            --memory=512m
            --cpus="1.0"
            --tmpfs /tmp:rw,noexec,nosuid,nodev,size=64m
            --tmpfs /home/nonroot/.cache:rw,noexec,nosuid,nodev,size=64m
            --mount "type=volume,src=${data_volume},dst=/home/nonroot/.glyph"
          )

          docker run "${common_flags[@]}" \
            --mount "type=volume,src=${out_volume},dst=/out" \
            glyphctl:ci demo --out /out/demo

          docker run "${common_flags[@]}" \
            --mount "type=volume,src=${out_volume},dst=/out,ro" \
            glyphctl:ci findings validate --input /out/demo/findings.jsonl

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: glyphctl:ci
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'

      - name: Grype vulnerability scan
        uses: anchore/grype-action@v0.9.1
        with:
          image: glyphctl:ci
          fail-build: true
          severity-cutoff: high
