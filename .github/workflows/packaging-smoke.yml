name: 0xgen packaging-smoke

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

jobs:
  deb:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim
    steps:
      - name: Install dependencies
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates curl gnupg jq
          install -d /etc/apt/keyrings
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg -o /etc/apt/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" >/etc/apt/sources.list.d/github-cli.list
          apt-get update
          apt-get install -y gh

      - name: Determine latest release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag=$(gh release view --repo "$GITHUB_REPOSITORY" --json tagName -q '.tagName' || echo '')
          echo "tag=$tag" >>"$GITHUB_OUTPUT"
          if [ -z "$tag" ]; then
            echo "No published releases found; skipping install"
          fi

      - name: Install Debian package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release.outputs.tag }}
        if: steps.release.outputs.tag != ''
        run: |
          set -euo pipefail
          asset="0xgenctl_${TAG}_linux_amd64.deb"
          gh release download "$TAG" --repo "$GITHUB_REPOSITORY" -p "$asset"
          apt-get install -y "./$asset"
          0xgenctl --version

  rpm:
    runs-on: ubuntu-latest
    container:
      image: quay.io/rockylinux/rockylinux:9
    steps:
      - name: Install dependencies
        run: |
          set -euo pipefail
          dnf install -y --setopt=install_weak_deps=False 'dnf-command(config-manager)' ca-certificates curl jq tar
          dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          dnf install -y --setopt=install_weak_deps=False gh

      - name: Determine latest release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag=$(gh release view --repo "$GITHUB_REPOSITORY" --json tagName -q '.tagName' || echo '')
          echo "tag=$tag" >>"$GITHUB_OUTPUT"
          if [ -z "$tag" ]; then
            echo "No published releases found; skipping install"
          fi

      - name: Install RPM package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release.outputs.tag }}
        if: steps.release.outputs.tag != ''
        run: |
          set -euo pipefail
          asset="0xgenctl_${TAG}_linux_amd64.rpm"
          gh release download "$TAG" --repo "$GITHUB_REPOSITORY" -p "$asset"
          dnf install -y --nogpgcheck "./$asset"
          0xgenctl --version

  scoop:
    runs-on: windows-latest
    steps:
      - name: Determine manifest status
        id: manifest
        shell: pwsh
        run: |
          $manifest = Invoke-RestMethod "https://raw.githubusercontent.com/${{ github.repository }}/main/scoop/bucket/0xgenctl.json"
          if ($manifest.version -eq '0.0.0') {
            "placeholder=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            Write-Host "Scoop manifest still uses placeholder version; skipping install"
          } else {
            "placeholder=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Install Scoop
        if: steps.manifest.outputs.placeholder == 'false'
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          iwr -useb get.scoop.sh | iex

      - name: Add 0xgen bucket and install 0xgenctl
        if: steps.manifest.outputs.placeholder == 'false'
        shell: pwsh
        run: |
          scoop bucket add 0xgen https://github.com/${{ github.repository }}
          scoop install 0xgenctl
          0xgenctl --version

  windows-msi:
    runs-on: windows-latest
    steps:
      - name: Determine latest release
        id: release
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $tag = ''
          try {
            $tag = gh release view --repo $env:GITHUB_REPOSITORY --json tagName -q '.tagName'
          } catch {
            Write-Host "No published releases found; skipping MSI install"
          }
          if ([string]::IsNullOrEmpty($tag)) {
            "tag=" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }

      - name: Download MSI
        if: steps.release.outputs.tag != ''
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.release.outputs.tag }}
        run: |
          gh release download $env:TAG --repo $env:GITHUB_REPOSITORY -p "0xgenctl_${env:TAG}_windows_amd64.msi" -D dist

      - name: Install MSI
        if: steps.release.outputs.tag != ''
        shell: pwsh
        env:
          TAG: ${{ steps.release.outputs.tag }}
        run: |
          $msi = "dist/0xgenctl_${env:TAG}_windows_amd64.msi"
          msiexec /i $msi /qn
          & 'C:\Program Files\0xgen\0xgenctl.exe' --version

      - name: Uninstall MSI
        if: steps.release.outputs.tag != ''
        shell: pwsh
        env:
          TAG: ${{ steps.release.outputs.tag }}
        run: |
          $msi = "dist/0xgenctl_${env:TAG}_windows_amd64.msi"
          msiexec /x $msi /qn
